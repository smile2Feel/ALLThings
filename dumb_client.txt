import socket
import threading
import struct
import time

def receive_all(sock, length):
    data = b""
    while len(data) < length:
        more_data = sock.recv(length - len(data))
        if not more_data:
            raise EOFError("Socket closed before receiving all data")
        data += more_data
    return data

def tcp_client_thread(server_ip, server_port, client_id):
    # 创建一个TCP/IP socket
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    try:
        # 尝试连接服务器
        client_socket.connect((server_ip, server_port))
        print(f"[Client {client_id}] 成功连接到服务器 {server_ip}:{server_port}")

        while True:
            # 发送消息到服务器
            client_socket.sendall(message.encode())
            print(f"[Client {client_id}] 已发送消息: {message}")

			start_time = time.time()
			
			# Receive the length of the incoming message first
			message_length_data = receive_all(client_socket, 10)
			(message_length,) = struct.unpack('!I', message_length_data)
			print(f"[Client {client_id}] 来自服务器的响应长度: {message_length}")
            
            # Receive the actual message data
			response_data = receive_all(client_socket, message_length)
			print(f"[Client {client_id}] 来自服务器的响应数据: {response_data.decode()}")
			
			end_time = time.time()
			execution_time = end_time - start_time
			print(f"[Client {client_id}] Execution time: {execution_time:.2f} 秒")

    except socket.error as err:
        print(f"[Client {client_id}] 连接失败: {err}")

    finally:
        # 关闭套接字
        client_socket.close()

if __name__ == "__main__":
    server_ip = input_with_default("请输入服务器IP地址:", "172.17.29.82")
    server_port = int(input_with_default("请输入服务器端口号:", "5556"))
    connection_count = int(input_with_default("请输入需要创建的连接数:", "1"))
    message = input_with_default("请输入要发送的消息:", "{"func":"get_luns", "page":0, "num":3000}")

    threads = []

    # 创建多个线程，每个线程表示一个独立的TCP连接
    for i in range(connection_count):
        thread = threading.Thread(target=tcp_client_thread, args=(server_ip, server_port, i+1))
        threads.append(thread)
        thread.start()

    # 等待所有线程完成
    for thread in threads:
        thread.join()

    print("所有连接已断开。")
